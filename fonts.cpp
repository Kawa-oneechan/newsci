#include "NewSCI.h"

//TODO: make Font::MeasureString the main deal, using the individual fonts' MeasureCharacter in turn.

Font* sysFont;
Font* debugFont;
Font blankFont;
VGAFont vgaFont;

namespace UTF8
{
	int Length(const char* str)
	{
		int ret = 1;
		while (*str)
		{
			char leader = *str++;
			if ((leader & 0x80) == 0)
				ret++;
			else if ((leader & 0xE0) == 0xC0)
			{
				str++;
				ret++;
			}
			else if ((leader & 0xF0) == 0xE0)
			{
				str+=2;
				ret++;
			}
		}
		return ret;
	}

	int DecodeChar(char** text, int* numBytes)
	{
		int c = 0;
		char* str = *text;
		char leader = *str;
		if ((leader & 0x80) == 0)
		{
			c = leader;
			if (numBytes) *numBytes = 1;
		}
		else
		{
			if ((leader & 0xE0) == 0xC0)
			{
				str++;
				char follower = (*str & 0x3F);
				c = ((leader & 0x1F) << 6) | follower;
				if (numBytes) *numBytes = 2;
			}
			else if ((leader & 0xF0) == 0xE0) //Triple word score!
			{
				str++;
				char middle =  (*str & 0x3F);
				str++;
				char trailer = (*str & 0x3F);
				c = ((leader & 0x1F) << 12) | (middle << 6) | trailer;
				if (numBytes) *numBytes = 3;
			}
		}
		*text = str;
		return c;
	}

	int DecodeChar(char** text) { return DecodeChar(text, NULL); }

	char* Decode(char* dest, char* source, int charCount)
	{
		char* str = source;
		char* ret = dest;
		while (*str)
		{
			int c = UTF8::DecodeChar(&str);
			if (c < charCount)
				*ret++ = c;
			else
				*ret++ = '?';
			str++;
		}
		*ret = 0;
		return dest;
	}

	char* Decode(char* dest, char* source)
	{
		return Decode(dest, source, 256);
	}

	char* Decode(char* text, int charCount)
	{
		char* ret = (char*)malloc(Length(text));
		return Decode(ret, text, charCount);
	}

	char* Decode(char* text)
	{
		char* ret = (char*)malloc(Length(text));
		return Decode(ret, text, 256);
	}
}

Font* Font::Load(std::string filename)
{
	Pack::PackFileRecord* pfr = Pack::Find(filename);
	if (pfr)
	{
		SDL_Log("Font::Load: Loading \"%s\" from packfile for sniffing.", filename.c_str());
		Uint16* data = (Uint16*)Pack::Read(pfr);
		Uint16 firstTwo = data[0];
		free(data);
		SDL_LogVerbose(SDL_LOG_CATEGORY_VIDEO, "Font::Load: Sniffed value for \"%s\" is 0x%X.", filename.c_str(), firstTwo);

		if (firstTwo == 0x0087) return new Font(filename);
		SDL_Log("Font::Load: Couldn't recognize type of \"%s\". Returning VGAFont.", filename.c_str());
		return (Font*)&vgaFont;
	}

	FILE* fd;
	if (fopen_s(&fd, filename.c_str(), "rb") != 0)
	{
		SDL_Log("Font::Load: Couldn't open \"%s\". Returning VGAFont.", filename.c_str());
		return (Font*)&vgaFont;
	}

	Uint16 firstTwo = 0;
	fread(&firstTwo, sizeof(Uint16), 1, fd);
	SDL_LogVerbose(SDL_LOG_CATEGORY_VIDEO, "Font::Load: Sniffed value for \"%s\" is 0x%X.", filename.c_str(), firstTwo);
	fclose(fd);

	if (firstTwo == 0x0087) return new Font(filename);

	SDL_Log("Font::Load: Couldn't recognize type of \"%s\". Returning VGAFont.", filename.c_str());
	return (Font*)&vgaFont;
}

Font::Font() { }

Font::Font(std::string filename)
{
	unsigned long size = 0;
	SDL_LogVerbose(SDL_LOG_CATEGORY_VIDEO, "Font::Font: Loading \"%s\" as an SCI font.", filename.c_str());
	char* data = (char*)LoadFile(filename, &size);
	Uint16* d = (Uint16*)data;
	d++; //skip SCI marker
	this->lowChar = *d++;
	this->highChar = *d++;
	this->lineHeight = *d++;
	this->charData = (Uint16*)malloc(size - 6);
	memcpy(this->charData, d, size - 6);
}

int Font::RenderCharacter(unsigned int c, int x, int y)
{
	//Handle f = (Handle)this;
	//SCIFontChar* ch = (SCIFontChar*)&f[charData[c]];
	auto offset =  this->charData[c];
	SCIFontChar* ch = (SCIFontChar*)((Uint8*)this->charData + offset - 6); //-6 to adjust for the header.

	//Now that we have our character data in ch->bitmap, we can draw it!
	char* charData = (char*)&ch->bitmap;
	int penY = y ; //+ f->lineHeight - ch->height;
	char b = 0; //, mask = 0xFF;
	for (int i = 0; i < ch->height; i++)
	{
		//if (greyedOutput)
		//	mask = ((greyedTop++) % 2) ? 0xAA : 0x55;
		for (int done = 0; done < ch->width; done++)
		{
			if ((done & 7) == 0) // fetching next data byte
				b = *(charData++); // & mask;
			if (b & 0x80) // if MSB is set - paint it
				SetPixel(x + done, penY, currentPort.fgColor);
				//SDL_RenderDrawPoint(sdlRenderer, x + done, penY);
			b = b << 1;
		}
		penY++;
	}
	return ch->width;
}

void Font::RenderString(std::string text, int x, int y)
{
	int penX = x, penY = y;
	char* t = (char*)text.c_str();
	while (*t)
	{
		unsigned int ch = UTF8::DecodeChar(&t);
		if (ch == '\r') // && (ch + 1) == '\n')
			t++;
		if (ch == '\n')
		{
			penX = x;
			penY = lineHeight;
		}
		else
			penX += RenderCharacter(ch, penX, penY);
		t++;
	}
}

int Font::MeasureCharacter(unsigned int ch)
{
	if (ch > this->highChar)
		return 0x0808;
	SCIFontChar* c = (SCIFontChar*)((Uint8*)this->charData + this->charData[ch] - 6);
	return c->height | (c->width << 8);
}

void Font::MeasureString(std::string text, Rect* rect, int maxWidth)
{
	Str first, str;
	int width, heightSoFar = 0, widthSoFar = 0, lineHeight = LineHeight(), count;
	bool end = false;

	str = (char*)text.c_str();

	while (!end)
	{
		first = str;
		count = GetLongest(&str, maxWidth, &end);
		first[count] = 0;
		width = TextWidth(first, 0, count);
		if (width > widthSoFar)
			widthSoFar = width;
		heightSoFar += lineHeight;
	}

	//heightSoFar -= lineHeight;

	rect->r = rect->l + widthSoFar;
	rect->b = rect->t + heightSoFar;
}

int Font::LineHeight() { return this->lineHeight; }
int Font::CharCount() { return this->highChar; }

void Font::Write(std::string text, Rect* rect, int mode)
{
	Str first, str;
	int width, height = 0, maxWidth, xPos, count;
	bool end = false;

	//rectIndex = 0;
	//newRect = (word*)RNewPtr((((strlen(text) / 7) * 4 + 1) * sizeof(word)));

	maxWidth = rect->r - rect->l;
	str = (char*)text.c_str();

	while (!end)
	{
		first = str;
		//\ = GetHighest(first, (count = GetLongest(&str, wide, defaultFont)), defaultFont);
		count = GetLongest(&str, maxWidth, &end);
		if (!end)
			first[count] = 0;
		width = TextWidth(first, 0, count);

		switch (mode)
		{
		case 0: //TE_JUSTLEFT:
		default:
			xPos = 0;
			break;
		case 1: //TE_JUSTCENTER
			xPos = (maxWidth - width) / 2;
			break;
		case 2: //TE_JUSTRIGHT
			xPos = (maxWidth - width);
			break;
		}
		RenderString(first, rect->l + xPos, rect->t + height);
		height += LineHeight();
	}
}

int Font::GetLongest(Str* str, int max, bool* end)
{
	Str last, first;
	unsigned int c;
	int charsEaten, length = 0;
	int width;

	first = last = *str;
	while (true)
	{
		c = UTF8::DecodeChar(&(*str), &charsEaten);
		(*str)++;
		if (c == '\n')
		{
			//(*str)++;
			return length;
		}
		if (c == '\0')
		{
			*end = true;
			return length;
		}
		if (c == ' ')
		{
			width = Font::TextWidth(first, 0, length + charsEaten);
			if (width >= max)
			{
				return length;
			}
		}
		length += charsEaten;
	}
}

int Font::TextWidth(Str str, int first, int count)
{
	Str s = str;
	int width = 0;
	while (count && *s)
	{
		width += this->MeasureCharacter(UTF8::DecodeChar(&s)) >> 8;
		s++;
		count--;
	}
	return width;
}

/* SCI FONTS
 * ---------
 * u16	sciMarker	must be 0x0087
 * u16	lowChar		lowest character index in this font, always 0
 * u16	highChar	highest character index in this font, usually either 127 or 255.
 * u16	lineHeight	line height in pixels
 * u16+	charData	list of offsets in resource to character data
 *
 * Character data:
 * u8	width
 * u8	height
 * u8+	bitmap		(width รท 8) ร height bytes, 1bpp
 */

/* VGA FONT
 * --------
 * Like an SCI font, but has no need for the header or character dimensions.
 * Is always 8pt.
 */

extern const unsigned char vgaCharData[];

VGAFont::VGAFont()
{
	this->charData = (Uint8*)*vgaCharData;
	this->lineHeight = 8;
	this->highChar = 127;
}

VGAFont::~VGAFont() { }

int VGAFont::RenderCharacter(unsigned char c, int x, int y)
{
	if (c > 127) c = 2;
	char* charData = (char*)&vgaCharData[c * 8];
	int penY = y ; //+ f->lineHeight - ch->height;
	for (int i = 0; i < 8; i++)
	{
		char b = *charData; //, mask = 0xFF;
		//if (greyedOutput)
		//	mask = ((greyedTop++) % 2) ? 0xAA : 0x55;
		for (int done = 0; done < 8; done++)
		{
			if (b & 0x80) // if MSB is set - paint it
				SetPixel(x + done, penY, currentPort.fgColor);
				//SDL_RenderDrawPoint(sdlRenderer, x + done, penY);
			b = b << 1;
		}
		charData++;
		penY++;
	}
	return 8;
}

void VGAFont::RenderString(std::string text, int x, int y)
{
	int penX = x, penY = y;
	char* c = (char*)text.c_str();
	while (*c)
	{
		if (*c == '\r' && (*c + 1) == '\n')
			c++;
		if (*c == '\n')
		{
			penX = x;
			penY += 8;
		}
		else
			penX += RenderCharacter(*c, penX, penY);
		c++;
	}
}

int VGAFont::MeasureCharacter(unsigned char ch) { return 0x0808; }

void VGAFont::MeasureString(std::string text, Rect* rect, int maxWidth)
{
	Handle f = (Handle)this;
	int width = 0, height = 8, widthNow = 0;
	char* c = (char*)text.c_str();
	while (*c)
	{
		if (*c == '\r' && (*c + 1) == '\n')
			c++;
		if (*c == '\n' || widthNow >= maxWidth)
		{
			widthNow = 0;
			height += 8;
		}
		else
			widthNow += 8;
		if (widthNow > width)
			width = widthNow;
		c++;
	}
	rect->r = rect->l + width;
	rect->b = rect->t + height;
}

int VGAFont::LineHeight() { return 8; }
int VGAFont::CharCount() { return 256; }

const unsigned char vgaCharData[] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,
	0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E, 0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,
	0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x38, 0x7C, 0x38, 0xFE, 0xFE, 0xD6, 0x10, 0x38,
	0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x10, 0x38, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
	0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
	0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,
	0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,
	0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0, 0x18, 0xDB, 0x3C, 0xE7, 0xE7, 0x3C, 0xDB, 0x18,
	0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,
	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
	0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00, 0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78,
	0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,
	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
	0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,
	0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
	0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
	0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
	0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
	0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00, 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
	0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
	0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00, 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
	0x78, 0xCC, 0x0C, 0x38, 0x60, 0xC4, 0xFC, 0x00, 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
	0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00, 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
	0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
	0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,
	0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0x00,
	0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00,
	0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,
	0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00, 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
	0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
	0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
	0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00,
	0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
	0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
	0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
	0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00,
	0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00, 0x78, 0xCC, 0x60, 0x30, 0x18, 0xCC, 0x78, 0x00,
	0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
	0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,
	0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00, 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
	0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
	0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
	0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
	0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
	0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
	0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
	0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00, 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,
	0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00,
	0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
	0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,
	0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00,
	0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00,
	0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
	0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00, 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,
	0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,
	0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
	0x18, 0x18, 0x7E, 0xC0, 0xC0, 0x7E, 0x18, 0x18, 0x38, 0x6C, 0x64, 0xF0, 0x60, 0xE6, 0xFC, 0x00,
	0x00, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0x00, 0xCC, 0xCC, 0x78, 0xFC, 0x30, 0xFC, 0x30, 0x30,
	0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78,
	0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x82, 0x9A, 0xA2, 0xA2, 0x9A, 0x82, 0x7C,
	0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xFC, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
	0x7C, 0x82, 0xB2, 0xAA, 0xB2, 0xAA, 0x82, 0x7C, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0xFC, 0x00,
	0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00, 0x70, 0x18, 0x30, 0x18, 0x70, 0x00, 0x00, 0x00,
	0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xC0,
	0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0x38, 0x30, 0x70, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00,
	0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
	0xC3, 0xC6, 0xCC, 0xDB, 0x37, 0x6F, 0xCF, 0x03, 0xC3, 0xC6, 0xCC, 0xDE, 0x33, 0x66, 0xCC, 0x0F,
	0xE0, 0x33, 0x66, 0x3C, 0xFB, 0x37, 0x6F, 0xC3, 0x30, 0x00, 0x30, 0x60, 0xC0, 0xCC, 0x78, 0x00,
	0xC0, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x06, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
	0x78, 0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00, 0xFC, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
	0xC6, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x30, 0x30, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00,
	0x3E, 0x6C, 0xCC, 0xFE, 0xCC, 0xCC, 0xCE, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x18, 0x0C, 0x78,
	0xE0, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00, 0x1C, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00,
	0x78, 0xCC, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00, 0xCC, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00,
	0xE0, 0x00, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00, 0x1C, 0x00, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x78, 0xCC, 0x00, 0x78, 0x30, 0x30, 0x78, 0x00, 0xCC, 0x00, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00,
	0xF8, 0x6C, 0x66, 0xF6, 0x66, 0x6C, 0xF8, 0x00, 0xFC, 0x00, 0xCC, 0xEC, 0xFC, 0xDC, 0xCC, 0x00,
	0xC0, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x06, 0x30, 0x78, 0xCC, 0xCC, 0x78, 0x30, 0x00,
	0x7C, 0xC6, 0x38, 0x6C, 0xC6, 0x6C, 0x38, 0x00, 0xFE, 0x00, 0x38, 0x6C, 0xC6, 0x6C, 0x38, 0x00,
	0xC3, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, 0x00,
	0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
	0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
	0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x1C, 0x00, 0xCC, 0xCC, 0x78, 0x30, 0x78, 0x00,
	0xF0, 0x60, 0x7C, 0x66, 0x7C, 0x60, 0xF0, 0x00, 0x78, 0xCC, 0xCC, 0xD8, 0xCC, 0xC6, 0xCC, 0x00,
	0xE0, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0x1C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00,
	0x7E, 0xC3, 0x3C, 0x06, 0x3E, 0x66, 0x3F, 0x00, 0xFC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00,
	0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0x30, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00,
	0x00, 0x00, 0x7F, 0x0C, 0x7F, 0xCC, 0x7F, 0x00, 0x00, 0x00, 0x78, 0xC0, 0xC0, 0x78, 0x0C, 0x38,
	0xE0, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00, 0x1C, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
	0x7E, 0xC3, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
	0xE0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00, 0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x7C, 0xC6, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00, 0xCC, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x18, 0x3E, 0x0C, 0x7C, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0xF8, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0x00,
	0x00, 0xE0, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x1C, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
	0x78, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0xFC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
	0x00, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x30, 0x30, 0x00, 0xFC, 0x00, 0x30, 0x30, 0x00,
	0x00, 0x02, 0x7C, 0xCE, 0xD6, 0xE6, 0x7C, 0x80, 0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
	0x00, 0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00, 0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
	0x00, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00, 0x00, 0x1C, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0x78,
	0xE0, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0xF0, 0x00, 0xCC, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8
};

